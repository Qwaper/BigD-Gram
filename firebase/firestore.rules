rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public usernames map (usernameLower -> uid)
    match /usernames/{uname} {
      allow read: if true;
      // Allow create only if not already taken
      allow create: if request.auth != null
        && !exists(/databases/$(database)/documents/usernames/$(uname));
      allow update, delete: if false;
    }

    // User profiles and contacts
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;

      match /contacts/{contactId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Conversations & messages
    match /conversations/{convId} {
      allow read: if request.auth != null
        && request.auth.uid in resource.data.participants;

      // Create conversation with exactly 2 participants including the caller
      allow create: if request.auth != null
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 2
        && request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null
        && request.auth.uid in resource.data.participants;

      match /messages/{msgId} {
        allow read: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
        allow create: if request.auth != null
          && request.resource.data.senderId == request.auth.uid
          && request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
        allow update, delete: if false;
      }
    }

    // Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
